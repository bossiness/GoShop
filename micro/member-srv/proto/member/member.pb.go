// Code generated by protoc-gen-go. DO NOT EDIT.
// source: btdxcx.com/micro/member-srv/proto/member/member.proto

/*
Package com_btdxcx_micro_srv_member is a generated protocol buffer package.

It is generated from these files:
	btdxcx.com/micro/member-srv/proto/member/member.proto

It has these top-level messages:
	CreateCustomerRequest
	CustomerResponse
	ReadCustomersRequest
	ReadCustomersResponse
	ReadCustomerRequest
	ReadCustomerFormNameRequest
	UpdateCustomerRequest
	DeleteCustomerRequest
	DeleteCustomerResponse
	CustomerRecord
	CreateAdminUserRequest
	AdminUserResponse
	ReadAdminUsersRequest
	ReadAdminUsersResponse
	ReadAdminUserRequest
	ReadAdminUserFormNameRequest
	UpdateAdminUserRequest
	DeleteAdminUserRequest
	DeleteAdminUserResponse
	AdminUserRecord
*/
package com_btdxcx_micro_srv_member

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CreateCustomerRequest struct {
	ShopId string          `protobuf:"bytes,1,opt,name=shop_id,json=shopId" json:"shop_id,omitempty"`
	Record *CustomerRecord `protobuf:"bytes,2,opt,name=record" json:"record,omitempty"`
}

func (m *CreateCustomerRequest) Reset()                    { *m = CreateCustomerRequest{} }
func (m *CreateCustomerRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateCustomerRequest) ProtoMessage()               {}
func (*CreateCustomerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateCustomerRequest) GetShopId() string {
	if m != nil {
		return m.ShopId
	}
	return ""
}

func (m *CreateCustomerRequest) GetRecord() *CustomerRecord {
	if m != nil {
		return m.Record
	}
	return nil
}

type CustomerResponse struct {
	Record *CustomerRecord `protobuf:"bytes,1,opt,name=record" json:"record,omitempty"`
}

func (m *CustomerResponse) Reset()                    { *m = CustomerResponse{} }
func (m *CustomerResponse) String() string            { return proto.CompactTextString(m) }
func (*CustomerResponse) ProtoMessage()               {}
func (*CustomerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CustomerResponse) GetRecord() *CustomerRecord {
	if m != nil {
		return m.Record
	}
	return nil
}

type ReadCustomersRequest struct {
	ShopId string `protobuf:"bytes,1,opt,name=shop_id,json=shopId" json:"shop_id,omitempty"`
	Offset int32  `protobuf:"varint,2,opt,name=offset" json:"offset"`
	Limit  int32  `protobuf:"varint,3,opt,name=limit" json:"limit"`
}

func (m *ReadCustomersRequest) Reset()                    { *m = ReadCustomersRequest{} }
func (m *ReadCustomersRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadCustomersRequest) ProtoMessage()               {}
func (*ReadCustomersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ReadCustomersRequest) GetShopId() string {
	if m != nil {
		return m.ShopId
	}
	return ""
}

func (m *ReadCustomersRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ReadCustomersRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ReadCustomersResponse struct {
	Offset  int32             `protobuf:"varint,1,opt,name=offset" json:"offset"`
	Limit   int32             `protobuf:"varint,2,opt,name=limit" json:"limit"`
	Total   int32             `protobuf:"varint,3,opt,name=total" json:"total"`
	Records []*CustomerRecord `protobuf:"bytes,4,rep,name=records" json:"records,omitempty"`
}

func (m *ReadCustomersResponse) Reset()                    { *m = ReadCustomersResponse{} }
func (m *ReadCustomersResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadCustomersResponse) ProtoMessage()               {}
func (*ReadCustomersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ReadCustomersResponse) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ReadCustomersResponse) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReadCustomersResponse) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *ReadCustomersResponse) GetRecords() []*CustomerRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

type ReadCustomerRequest struct {
	ShopId string `protobuf:"bytes,1,opt,name=shop_id,json=shopId" json:"shop_id,omitempty"`
	Id     string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *ReadCustomerRequest) Reset()                    { *m = ReadCustomerRequest{} }
func (m *ReadCustomerRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadCustomerRequest) ProtoMessage()               {}
func (*ReadCustomerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ReadCustomerRequest) GetShopId() string {
	if m != nil {
		return m.ShopId
	}
	return ""
}

func (m *ReadCustomerRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ReadCustomerFormNameRequest struct {
	ShopId string `protobuf:"bytes,1,opt,name=shop_id,json=shopId" json:"shop_id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *ReadCustomerFormNameRequest) Reset()                    { *m = ReadCustomerFormNameRequest{} }
func (m *ReadCustomerFormNameRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadCustomerFormNameRequest) ProtoMessage()               {}
func (*ReadCustomerFormNameRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ReadCustomerFormNameRequest) GetShopId() string {
	if m != nil {
		return m.ShopId
	}
	return ""
}

func (m *ReadCustomerFormNameRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type UpdateCustomerRequest struct {
	ShopId string          `protobuf:"bytes,1,opt,name=shop_id,json=shopId" json:"shop_id,omitempty"`
	Id     string          `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Record *CustomerRecord `protobuf:"bytes,3,opt,name=record" json:"record,omitempty"`
}

func (m *UpdateCustomerRequest) Reset()                    { *m = UpdateCustomerRequest{} }
func (m *UpdateCustomerRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateCustomerRequest) ProtoMessage()               {}
func (*UpdateCustomerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *UpdateCustomerRequest) GetShopId() string {
	if m != nil {
		return m.ShopId
	}
	return ""
}

func (m *UpdateCustomerRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateCustomerRequest) GetRecord() *CustomerRecord {
	if m != nil {
		return m.Record
	}
	return nil
}

type DeleteCustomerRequest struct {
	ShopId string `protobuf:"bytes,1,opt,name=shop_id,json=shopId" json:"shop_id,omitempty"`
	Id     string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteCustomerRequest) Reset()                    { *m = DeleteCustomerRequest{} }
func (m *DeleteCustomerRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteCustomerRequest) ProtoMessage()               {}
func (*DeleteCustomerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DeleteCustomerRequest) GetShopId() string {
	if m != nil {
		return m.ShopId
	}
	return ""
}

func (m *DeleteCustomerRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DeleteCustomerResponse struct {
}

func (m *DeleteCustomerResponse) Reset()                    { *m = DeleteCustomerResponse{} }
func (m *DeleteCustomerResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteCustomerResponse) ProtoMessage()               {}
func (*DeleteCustomerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type CustomerRecord struct {
	Id                  string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Username            string   `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	FirstName           string   `protobuf:"bytes,3,opt,name=firstName" json:"firstName,omitempty"`
	LastName            string   `protobuf:"bytes,4,opt,name=lastName" json:"lastName,omitempty"`
	Phone               string   `protobuf:"bytes,5,opt,name=phone" json:"phone,omitempty"`
	Email               string   `protobuf:"bytes,6,opt,name=email" json:"email,omitempty"`
	Portrait            string   `protobuf:"bytes,7,opt,name=portrait" json:"portrait,omitempty"`
	Gender              string   `protobuf:"bytes,8,opt,name=gender" json:"gender,omitempty"`
	Birthday            int64    `protobuf:"varint,9,opt,name=birthday" json:"birthday,omitempty"`
	Groups              []string `protobuf:"bytes,10,rep,name=groups" json:"groups,omitempty"`
	RegisteredAt        int64    `protobuf:"varint,11,opt,name=registered_at,json=registeredAt" json:"registered_at,omitempty"`
	AccessAt            int64    `protobuf:"varint,12,opt,name=access_at,json=accessAt" json:"access_at,omitempty"`
	Integral            int64    `protobuf:"varint,13,opt,name=integral" json:"integral,omitempty"`
	BuyNumber           int64    `protobuf:"varint,14,opt,name=buy_number,json=buyNumber" json:"buy_number,omitempty"`
	TotalPurchaseAmount int64    `protobuf:"varint,15,opt,name=totalPurchaseAmount" json:"totalPurchaseAmount,omitempty"`
	Role                []string `protobuf:"bytes,16,rep,name=role" json:"role,omitempty"`
	Superior            string   `protobuf:"bytes,17,opt,name=superior" json:"superior,omitempty"`
}

func (m *CustomerRecord) Reset()                    { *m = CustomerRecord{} }
func (m *CustomerRecord) String() string            { return proto.CompactTextString(m) }
func (*CustomerRecord) ProtoMessage()               {}
func (*CustomerRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CustomerRecord) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CustomerRecord) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *CustomerRecord) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *CustomerRecord) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *CustomerRecord) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *CustomerRecord) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *CustomerRecord) GetPortrait() string {
	if m != nil {
		return m.Portrait
	}
	return ""
}

func (m *CustomerRecord) GetGender() string {
	if m != nil {
		return m.Gender
	}
	return ""
}

func (m *CustomerRecord) GetBirthday() int64 {
	if m != nil {
		return m.Birthday
	}
	return 0
}

func (m *CustomerRecord) GetGroups() []string {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *CustomerRecord) GetRegisteredAt() int64 {
	if m != nil {
		return m.RegisteredAt
	}
	return 0
}

func (m *CustomerRecord) GetAccessAt() int64 {
	if m != nil {
		return m.AccessAt
	}
	return 0
}

func (m *CustomerRecord) GetIntegral() int64 {
	if m != nil {
		return m.Integral
	}
	return 0
}

func (m *CustomerRecord) GetBuyNumber() int64 {
	if m != nil {
		return m.BuyNumber
	}
	return 0
}

func (m *CustomerRecord) GetTotalPurchaseAmount() int64 {
	if m != nil {
		return m.TotalPurchaseAmount
	}
	return 0
}

func (m *CustomerRecord) GetRole() []string {
	if m != nil {
		return m.Role
	}
	return nil
}

func (m *CustomerRecord) GetSuperior() string {
	if m != nil {
		return m.Superior
	}
	return ""
}

type CreateAdminUserRequest struct {
	ShopId string           `protobuf:"bytes,1,opt,name=shop_id,json=shopId" json:"shop_id,omitempty"`
	Record *AdminUserRecord `protobuf:"bytes,2,opt,name=record" json:"record,omitempty"`
}

func (m *CreateAdminUserRequest) Reset()                    { *m = CreateAdminUserRequest{} }
func (m *CreateAdminUserRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateAdminUserRequest) ProtoMessage()               {}
func (*CreateAdminUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *CreateAdminUserRequest) GetShopId() string {
	if m != nil {
		return m.ShopId
	}
	return ""
}

func (m *CreateAdminUserRequest) GetRecord() *AdminUserRecord {
	if m != nil {
		return m.Record
	}
	return nil
}

type AdminUserResponse struct {
	Record *AdminUserRecord `protobuf:"bytes,1,opt,name=record" json:"record,omitempty"`
}

func (m *AdminUserResponse) Reset()                    { *m = AdminUserResponse{} }
func (m *AdminUserResponse) String() string            { return proto.CompactTextString(m) }
func (*AdminUserResponse) ProtoMessage()               {}
func (*AdminUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *AdminUserResponse) GetRecord() *AdminUserRecord {
	if m != nil {
		return m.Record
	}
	return nil
}

type ReadAdminUsersRequest struct {
	ShopId string `protobuf:"bytes,1,opt,name=shop_id,json=shopId" json:"shop_id,omitempty"`
	Offset int32  `protobuf:"varint,2,opt,name=offset" json:"offset"`
	Limit  int32  `protobuf:"varint,3,opt,name=limit" json:"limit"`
}

func (m *ReadAdminUsersRequest) Reset()                    { *m = ReadAdminUsersRequest{} }
func (m *ReadAdminUsersRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadAdminUsersRequest) ProtoMessage()               {}
func (*ReadAdminUsersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ReadAdminUsersRequest) GetShopId() string {
	if m != nil {
		return m.ShopId
	}
	return ""
}

func (m *ReadAdminUsersRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ReadAdminUsersRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ReadAdminUsersResponse struct {
	Offset  int32              `protobuf:"varint,1,opt,name=offset" json:"offset"`
	Limit   int32              `protobuf:"varint,2,opt,name=limit" json:"limit"`
	Total   int32              `protobuf:"varint,3,opt,name=total" json:"total"`
	Records []*AdminUserRecord `protobuf:"bytes,4,rep,name=records" json:"records,omitempty"`
}

func (m *ReadAdminUsersResponse) Reset()                    { *m = ReadAdminUsersResponse{} }
func (m *ReadAdminUsersResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadAdminUsersResponse) ProtoMessage()               {}
func (*ReadAdminUsersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ReadAdminUsersResponse) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ReadAdminUsersResponse) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReadAdminUsersResponse) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *ReadAdminUsersResponse) GetRecords() []*AdminUserRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

type ReadAdminUserRequest struct {
	ShopId string `protobuf:"bytes,1,opt,name=shop_id,json=shopId" json:"shop_id,omitempty"`
	Id     string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *ReadAdminUserRequest) Reset()                    { *m = ReadAdminUserRequest{} }
func (m *ReadAdminUserRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadAdminUserRequest) ProtoMessage()               {}
func (*ReadAdminUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ReadAdminUserRequest) GetShopId() string {
	if m != nil {
		return m.ShopId
	}
	return ""
}

func (m *ReadAdminUserRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ReadAdminUserFormNameRequest struct {
	ShopId string `protobuf:"bytes,1,opt,name=shop_id,json=shopId" json:"shop_id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *ReadAdminUserFormNameRequest) Reset()                    { *m = ReadAdminUserFormNameRequest{} }
func (m *ReadAdminUserFormNameRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadAdminUserFormNameRequest) ProtoMessage()               {}
func (*ReadAdminUserFormNameRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ReadAdminUserFormNameRequest) GetShopId() string {
	if m != nil {
		return m.ShopId
	}
	return ""
}

func (m *ReadAdminUserFormNameRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type UpdateAdminUserRequest struct {
	ShopId string           `protobuf:"bytes,1,opt,name=shop_id,json=shopId" json:"shop_id,omitempty"`
	Id     string           `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Record *AdminUserRecord `protobuf:"bytes,3,opt,name=record" json:"record,omitempty"`
}

func (m *UpdateAdminUserRequest) Reset()                    { *m = UpdateAdminUserRequest{} }
func (m *UpdateAdminUserRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateAdminUserRequest) ProtoMessage()               {}
func (*UpdateAdminUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *UpdateAdminUserRequest) GetShopId() string {
	if m != nil {
		return m.ShopId
	}
	return ""
}

func (m *UpdateAdminUserRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateAdminUserRequest) GetRecord() *AdminUserRecord {
	if m != nil {
		return m.Record
	}
	return nil
}

type DeleteAdminUserRequest struct {
	ShopId string `protobuf:"bytes,1,opt,name=shop_id,json=shopId" json:"shop_id,omitempty"`
	Id     string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteAdminUserRequest) Reset()                    { *m = DeleteAdminUserRequest{} }
func (m *DeleteAdminUserRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteAdminUserRequest) ProtoMessage()               {}
func (*DeleteAdminUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *DeleteAdminUserRequest) GetShopId() string {
	if m != nil {
		return m.ShopId
	}
	return ""
}

func (m *DeleteAdminUserRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DeleteAdminUserResponse struct {
}

func (m *DeleteAdminUserResponse) Reset()                    { *m = DeleteAdminUserResponse{} }
func (m *DeleteAdminUserResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteAdminUserResponse) ProtoMessage()               {}
func (*DeleteAdminUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

type AdminUserRecord struct {
	Id           string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Username     string   `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	FirstName    string   `protobuf:"bytes,3,opt,name=firstName" json:"firstName,omitempty"`
	LastName     string   `protobuf:"bytes,4,opt,name=lastName" json:"lastName,omitempty"`
	Phone        string   `protobuf:"bytes,5,opt,name=phone" json:"phone,omitempty"`
	Email        string   `protobuf:"bytes,6,opt,name=email" json:"email,omitempty"`
	Portrait     string   `protobuf:"bytes,7,opt,name=portrait" json:"portrait,omitempty"`
	RegisteredAt int64    `protobuf:"varint,8,opt,name=registered_at,json=registeredAt" json:"registered_at,omitempty"`
	AccessAt     int64    `protobuf:"varint,9,opt,name=access_at,json=accessAt" json:"access_at,omitempty"`
	Enable       bool     `protobuf:"varint,10,opt,name=enable" json:"enable,omitempty"`
	Role         []string `protobuf:"bytes,11,rep,name=role" json:"role,omitempty"`
}

func (m *AdminUserRecord) Reset()                    { *m = AdminUserRecord{} }
func (m *AdminUserRecord) String() string            { return proto.CompactTextString(m) }
func (*AdminUserRecord) ProtoMessage()               {}
func (*AdminUserRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *AdminUserRecord) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AdminUserRecord) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *AdminUserRecord) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *AdminUserRecord) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *AdminUserRecord) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *AdminUserRecord) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *AdminUserRecord) GetPortrait() string {
	if m != nil {
		return m.Portrait
	}
	return ""
}

func (m *AdminUserRecord) GetRegisteredAt() int64 {
	if m != nil {
		return m.RegisteredAt
	}
	return 0
}

func (m *AdminUserRecord) GetAccessAt() int64 {
	if m != nil {
		return m.AccessAt
	}
	return 0
}

func (m *AdminUserRecord) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *AdminUserRecord) GetRole() []string {
	if m != nil {
		return m.Role
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateCustomerRequest)(nil), "com.btdxcx.micro.srv.member.CreateCustomerRequest")
	proto.RegisterType((*CustomerResponse)(nil), "com.btdxcx.micro.srv.member.CustomerResponse")
	proto.RegisterType((*ReadCustomersRequest)(nil), "com.btdxcx.micro.srv.member.ReadCustomersRequest")
	proto.RegisterType((*ReadCustomersResponse)(nil), "com.btdxcx.micro.srv.member.ReadCustomersResponse")
	proto.RegisterType((*ReadCustomerRequest)(nil), "com.btdxcx.micro.srv.member.ReadCustomerRequest")
	proto.RegisterType((*ReadCustomerFormNameRequest)(nil), "com.btdxcx.micro.srv.member.ReadCustomerFormNameRequest")
	proto.RegisterType((*UpdateCustomerRequest)(nil), "com.btdxcx.micro.srv.member.UpdateCustomerRequest")
	proto.RegisterType((*DeleteCustomerRequest)(nil), "com.btdxcx.micro.srv.member.DeleteCustomerRequest")
	proto.RegisterType((*DeleteCustomerResponse)(nil), "com.btdxcx.micro.srv.member.DeleteCustomerResponse")
	proto.RegisterType((*CustomerRecord)(nil), "com.btdxcx.micro.srv.member.CustomerRecord")
	proto.RegisterType((*CreateAdminUserRequest)(nil), "com.btdxcx.micro.srv.member.CreateAdminUserRequest")
	proto.RegisterType((*AdminUserResponse)(nil), "com.btdxcx.micro.srv.member.AdminUserResponse")
	proto.RegisterType((*ReadAdminUsersRequest)(nil), "com.btdxcx.micro.srv.member.ReadAdminUsersRequest")
	proto.RegisterType((*ReadAdminUsersResponse)(nil), "com.btdxcx.micro.srv.member.ReadAdminUsersResponse")
	proto.RegisterType((*ReadAdminUserRequest)(nil), "com.btdxcx.micro.srv.member.ReadAdminUserRequest")
	proto.RegisterType((*ReadAdminUserFormNameRequest)(nil), "com.btdxcx.micro.srv.member.ReadAdminUserFormNameRequest")
	proto.RegisterType((*UpdateAdminUserRequest)(nil), "com.btdxcx.micro.srv.member.UpdateAdminUserRequest")
	proto.RegisterType((*DeleteAdminUserRequest)(nil), "com.btdxcx.micro.srv.member.DeleteAdminUserRequest")
	proto.RegisterType((*DeleteAdminUserResponse)(nil), "com.btdxcx.micro.srv.member.DeleteAdminUserResponse")
	proto.RegisterType((*AdminUserRecord)(nil), "com.btdxcx.micro.srv.member.AdminUserRecord")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Customer service

type CustomerClient interface {
	CreateCustomer(ctx context.Context, in *CreateCustomerRequest, opts ...client.CallOption) (*CustomerResponse, error)
	ReadCustomers(ctx context.Context, in *ReadCustomersRequest, opts ...client.CallOption) (*ReadCustomersResponse, error)
	ReadCustomer(ctx context.Context, in *ReadCustomerRequest, opts ...client.CallOption) (*CustomerResponse, error)
	ReadCustomerFormName(ctx context.Context, in *ReadCustomerFormNameRequest, opts ...client.CallOption) (*CustomerResponse, error)
	UpdateCustomer(ctx context.Context, in *UpdateCustomerRequest, opts ...client.CallOption) (*CustomerResponse, error)
	DeleteCustomer(ctx context.Context, in *DeleteCustomerRequest, opts ...client.CallOption) (*DeleteCustomerResponse, error)
}

type customerClient struct {
	c           client.Client
	serviceName string
}

func NewCustomerClient(serviceName string, c client.Client) CustomerClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "com.btdxcx.micro.srv.member"
	}
	return &customerClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *customerClient) CreateCustomer(ctx context.Context, in *CreateCustomerRequest, opts ...client.CallOption) (*CustomerResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Customer.CreateCustomer", in)
	out := new(CustomerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerClient) ReadCustomers(ctx context.Context, in *ReadCustomersRequest, opts ...client.CallOption) (*ReadCustomersResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Customer.ReadCustomers", in)
	out := new(ReadCustomersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerClient) ReadCustomer(ctx context.Context, in *ReadCustomerRequest, opts ...client.CallOption) (*CustomerResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Customer.ReadCustomer", in)
	out := new(CustomerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerClient) ReadCustomerFormName(ctx context.Context, in *ReadCustomerFormNameRequest, opts ...client.CallOption) (*CustomerResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Customer.ReadCustomerFormName", in)
	out := new(CustomerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerClient) UpdateCustomer(ctx context.Context, in *UpdateCustomerRequest, opts ...client.CallOption) (*CustomerResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Customer.UpdateCustomer", in)
	out := new(CustomerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerClient) DeleteCustomer(ctx context.Context, in *DeleteCustomerRequest, opts ...client.CallOption) (*DeleteCustomerResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Customer.DeleteCustomer", in)
	out := new(DeleteCustomerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Customer service

type CustomerHandler interface {
	CreateCustomer(context.Context, *CreateCustomerRequest, *CustomerResponse) error
	ReadCustomers(context.Context, *ReadCustomersRequest, *ReadCustomersResponse) error
	ReadCustomer(context.Context, *ReadCustomerRequest, *CustomerResponse) error
	ReadCustomerFormName(context.Context, *ReadCustomerFormNameRequest, *CustomerResponse) error
	UpdateCustomer(context.Context, *UpdateCustomerRequest, *CustomerResponse) error
	DeleteCustomer(context.Context, *DeleteCustomerRequest, *DeleteCustomerResponse) error
}

func RegisterCustomerHandler(s server.Server, hdlr CustomerHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Customer{hdlr}, opts...))
}

type Customer struct {
	CustomerHandler
}

func (h *Customer) CreateCustomer(ctx context.Context, in *CreateCustomerRequest, out *CustomerResponse) error {
	return h.CustomerHandler.CreateCustomer(ctx, in, out)
}

func (h *Customer) ReadCustomers(ctx context.Context, in *ReadCustomersRequest, out *ReadCustomersResponse) error {
	return h.CustomerHandler.ReadCustomers(ctx, in, out)
}

func (h *Customer) ReadCustomer(ctx context.Context, in *ReadCustomerRequest, out *CustomerResponse) error {
	return h.CustomerHandler.ReadCustomer(ctx, in, out)
}

func (h *Customer) ReadCustomerFormName(ctx context.Context, in *ReadCustomerFormNameRequest, out *CustomerResponse) error {
	return h.CustomerHandler.ReadCustomerFormName(ctx, in, out)
}

func (h *Customer) UpdateCustomer(ctx context.Context, in *UpdateCustomerRequest, out *CustomerResponse) error {
	return h.CustomerHandler.UpdateCustomer(ctx, in, out)
}

func (h *Customer) DeleteCustomer(ctx context.Context, in *DeleteCustomerRequest, out *DeleteCustomerResponse) error {
	return h.CustomerHandler.DeleteCustomer(ctx, in, out)
}

// Client API for AdminUser service

type AdminUserClient interface {
	CreateAdminUser(ctx context.Context, in *CreateAdminUserRequest, opts ...client.CallOption) (*AdminUserResponse, error)
	ReadAdminUsers(ctx context.Context, in *ReadAdminUsersRequest, opts ...client.CallOption) (*ReadAdminUsersResponse, error)
	ReadAdminUser(ctx context.Context, in *ReadAdminUserRequest, opts ...client.CallOption) (*AdminUserResponse, error)
	ReadAdminUserFormName(ctx context.Context, in *ReadAdminUserFormNameRequest, opts ...client.CallOption) (*AdminUserResponse, error)
	UpdateAdminUser(ctx context.Context, in *UpdateAdminUserRequest, opts ...client.CallOption) (*AdminUserResponse, error)
	DeleteAdminUser(ctx context.Context, in *DeleteAdminUserRequest, opts ...client.CallOption) (*DeleteAdminUserResponse, error)
}

type adminUserClient struct {
	c           client.Client
	serviceName string
}

func NewAdminUserClient(serviceName string, c client.Client) AdminUserClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "com.btdxcx.micro.srv.member"
	}
	return &adminUserClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *adminUserClient) CreateAdminUser(ctx context.Context, in *CreateAdminUserRequest, opts ...client.CallOption) (*AdminUserResponse, error) {
	req := c.c.NewRequest(c.serviceName, "AdminUser.CreateAdminUser", in)
	out := new(AdminUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminUserClient) ReadAdminUsers(ctx context.Context, in *ReadAdminUsersRequest, opts ...client.CallOption) (*ReadAdminUsersResponse, error) {
	req := c.c.NewRequest(c.serviceName, "AdminUser.ReadAdminUsers", in)
	out := new(ReadAdminUsersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminUserClient) ReadAdminUser(ctx context.Context, in *ReadAdminUserRequest, opts ...client.CallOption) (*AdminUserResponse, error) {
	req := c.c.NewRequest(c.serviceName, "AdminUser.ReadAdminUser", in)
	out := new(AdminUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminUserClient) ReadAdminUserFormName(ctx context.Context, in *ReadAdminUserFormNameRequest, opts ...client.CallOption) (*AdminUserResponse, error) {
	req := c.c.NewRequest(c.serviceName, "AdminUser.ReadAdminUserFormName", in)
	out := new(AdminUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminUserClient) UpdateAdminUser(ctx context.Context, in *UpdateAdminUserRequest, opts ...client.CallOption) (*AdminUserResponse, error) {
	req := c.c.NewRequest(c.serviceName, "AdminUser.UpdateAdminUser", in)
	out := new(AdminUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminUserClient) DeleteAdminUser(ctx context.Context, in *DeleteAdminUserRequest, opts ...client.CallOption) (*DeleteAdminUserResponse, error) {
	req := c.c.NewRequest(c.serviceName, "AdminUser.DeleteAdminUser", in)
	out := new(DeleteAdminUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AdminUser service

type AdminUserHandler interface {
	CreateAdminUser(context.Context, *CreateAdminUserRequest, *AdminUserResponse) error
	ReadAdminUsers(context.Context, *ReadAdminUsersRequest, *ReadAdminUsersResponse) error
	ReadAdminUser(context.Context, *ReadAdminUserRequest, *AdminUserResponse) error
	ReadAdminUserFormName(context.Context, *ReadAdminUserFormNameRequest, *AdminUserResponse) error
	UpdateAdminUser(context.Context, *UpdateAdminUserRequest, *AdminUserResponse) error
	DeleteAdminUser(context.Context, *DeleteAdminUserRequest, *DeleteAdminUserResponse) error
}

func RegisterAdminUserHandler(s server.Server, hdlr AdminUserHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&AdminUser{hdlr}, opts...))
}

type AdminUser struct {
	AdminUserHandler
}

func (h *AdminUser) CreateAdminUser(ctx context.Context, in *CreateAdminUserRequest, out *AdminUserResponse) error {
	return h.AdminUserHandler.CreateAdminUser(ctx, in, out)
}

func (h *AdminUser) ReadAdminUsers(ctx context.Context, in *ReadAdminUsersRequest, out *ReadAdminUsersResponse) error {
	return h.AdminUserHandler.ReadAdminUsers(ctx, in, out)
}

func (h *AdminUser) ReadAdminUser(ctx context.Context, in *ReadAdminUserRequest, out *AdminUserResponse) error {
	return h.AdminUserHandler.ReadAdminUser(ctx, in, out)
}

func (h *AdminUser) ReadAdminUserFormName(ctx context.Context, in *ReadAdminUserFormNameRequest, out *AdminUserResponse) error {
	return h.AdminUserHandler.ReadAdminUserFormName(ctx, in, out)
}

func (h *AdminUser) UpdateAdminUser(ctx context.Context, in *UpdateAdminUserRequest, out *AdminUserResponse) error {
	return h.AdminUserHandler.UpdateAdminUser(ctx, in, out)
}

func (h *AdminUser) DeleteAdminUser(ctx context.Context, in *DeleteAdminUserRequest, out *DeleteAdminUserResponse) error {
	return h.AdminUserHandler.DeleteAdminUser(ctx, in, out)
}

func init() {
	proto.RegisterFile("btdxcx.com/micro/member-srv/proto/member/member.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 944 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x57, 0x5f, 0x6f, 0xe3, 0x44,
	0x10, 0x3f, 0x27, 0x4d, 0x1a, 0x4f, 0xdb, 0xe4, 0x6e, 0xef, 0x9a, 0x5b, 0xd2, 0x43, 0x8a, 0xcc,
	0x4b, 0x25, 0xb8, 0xf4, 0x2e, 0x05, 0x09, 0x5e, 0x80, 0xa8, 0xe5, 0x24, 0x40, 0x3a, 0x21, 0x4b,
	0x27, 0xc4, 0x03, 0x54, 0x4e, 0xbc, 0x6d, 0x2d, 0xc5, 0x5e, 0xb3, 0xbb, 0x2e, 0xad, 0x40, 0x42,
	0x42, 0x42, 0x7c, 0x0f, 0xc4, 0x2b, 0x1f, 0x89, 0x0f, 0xc0, 0x23, 0xdf, 0x00, 0x79, 0xd7, 0x76,
	0xec, 0xad, 0x55, 0xff, 0xb9, 0x7b, 0xb9, 0xa7, 0x78, 0x66, 0x3c, 0xbf, 0xd9, 0x99, 0x1d, 0xff,
	0x66, 0x02, 0x1f, 0x2d, 0x85, 0x7b, 0xbd, 0xba, 0x9e, 0xad, 0xa8, 0x7f, 0xe4, 0x7b, 0x2b, 0x46,
	0x8f, 0x7c, 0xe2, 0x2f, 0x09, 0x7b, 0xca, 0xd9, 0xd5, 0x51, 0xc8, 0xa8, 0x48, 0x15, 0xc9, 0xcf,
	0x4c, 0xea, 0xd0, 0xc1, 0x8a, 0xfa, 0xb3, 0xc4, 0x55, 0xba, 0xcd, 0x38, 0xbb, 0x9a, 0xa9, 0x57,
	0xac, 0x08, 0xf6, 0x4f, 0x18, 0x71, 0x04, 0x39, 0x89, 0xb8, 0xa0, 0x3e, 0x61, 0x36, 0xf9, 0x31,
	0x22, 0x5c, 0xa0, 0xc7, 0xb0, 0xcd, 0x2f, 0x69, 0x78, 0xe6, 0xb9, 0xd8, 0x98, 0x1a, 0x87, 0xa6,
	0xdd, 0x8f, 0xc5, 0x2f, 0x5d, 0x74, 0x02, 0x7d, 0x46, 0x56, 0x94, 0xb9, 0xb8, 0x33, 0x35, 0x0e,
	0x77, 0xe6, 0xef, 0xcf, 0xee, 0xc0, 0x9f, 0x6d, 0x60, 0x63, 0x17, 0x3b, 0x71, 0xb5, 0xbe, 0x85,
	0xfb, 0x1b, 0x0b, 0x0f, 0x69, 0xc0, 0x49, 0x0e, 0xd8, 0x68, 0x0f, 0xfc, 0x3d, 0x3c, 0xb2, 0x89,
	0xe3, 0xa6, 0x56, 0x5e, 0x99, 0xce, 0x18, 0xfa, 0xf4, 0xfc, 0x9c, 0x13, 0x21, 0xd3, 0xe9, 0xd9,
	0x89, 0x84, 0x1e, 0x41, 0x6f, 0xed, 0xf9, 0x9e, 0xc0, 0x5d, 0xa9, 0x56, 0x82, 0xf5, 0xa7, 0x01,
	0xfb, 0x1a, 0x7e, 0x72, 0xfa, 0x0d, 0x8e, 0x51, 0x8e, 0xd3, 0xc9, 0xe1, 0xc4, 0x5a, 0x41, 0x85,
	0xb3, 0x4e, 0xd1, 0xa5, 0x80, 0xbe, 0x80, 0x6d, 0x95, 0x06, 0xc7, 0x5b, 0xd3, 0x6e, 0xd3, 0x12,
	0xa4, 0xbe, 0xd6, 0xa7, 0xf0, 0x30, 0x7f, 0xc6, 0xca, 0x12, 0x0c, 0xa1, 0xe3, 0xa9, 0xdb, 0x34,
	0xed, 0x8e, 0xe7, 0x5a, 0x5f, 0xc1, 0x41, 0xde, 0xff, 0x05, 0x65, 0xfe, 0x4b, 0xc7, 0x27, 0x95,
	0x38, 0x08, 0xb6, 0x02, 0xc7, 0x27, 0x09, 0x92, 0x7c, 0xb6, 0x7e, 0x37, 0x60, 0xff, 0x55, 0xe8,
	0x36, 0x69, 0x30, 0xed, 0x38, 0xb9, 0xbe, 0xe8, 0xb6, 0xef, 0x8b, 0xcf, 0x61, 0xff, 0x94, 0xac,
	0x49, 0xfb, 0x63, 0x58, 0x18, 0xc6, 0x3a, 0x82, 0xba, 0x7a, 0xeb, 0xdf, 0x2e, 0x0c, 0x8b, 0x61,
	0x13, 0x67, 0x23, 0xcb, 0x61, 0x02, 0x83, 0x88, 0x13, 0x96, 0x2b, 0x4f, 0x26, 0xa3, 0x27, 0x60,
	0x9e, 0x7b, 0x8c, 0x8b, 0xb8, 0xc6, 0x32, 0x45, 0xd3, 0xde, 0x28, 0x62, 0xcf, 0xb5, 0x93, 0x18,
	0xb7, 0x94, 0x67, 0x2a, 0xc7, 0x5d, 0x14, 0x5e, 0xd2, 0x80, 0xe0, 0x9e, 0x34, 0x28, 0x21, 0xd6,
	0x12, 0xdf, 0xf1, 0xd6, 0xb8, 0xaf, 0xb4, 0x52, 0x88, 0x71, 0x42, 0xca, 0x04, 0x73, 0x3c, 0x81,
	0xb7, 0x15, 0x4e, 0x2a, 0xc7, 0xbd, 0x7b, 0x41, 0x02, 0x97, 0x30, 0x3c, 0x50, 0x25, 0x50, 0x52,
	0xec, 0xb3, 0xf4, 0x98, 0xb8, 0x74, 0x9d, 0x1b, 0x6c, 0x4e, 0x8d, 0xc3, 0xae, 0x9d, 0xc9, 0xd2,
	0x87, 0xd1, 0x28, 0xe4, 0x18, 0xa6, 0x5d, 0xe9, 0x23, 0x25, 0xf4, 0x1e, 0xec, 0x31, 0x72, 0xe1,
	0x71, 0x41, 0x18, 0x71, 0xcf, 0x1c, 0x81, 0x77, 0xa4, 0xe3, 0xee, 0x46, 0xb9, 0x10, 0xe8, 0x00,
	0x4c, 0x67, 0xb5, 0x22, 0x9c, 0xc7, 0x2f, 0xec, 0x2a, 0x64, 0xa5, 0x58, 0x88, 0x38, 0xaa, 0x17,
	0x08, 0x72, 0xc1, 0x9c, 0x35, 0xde, 0x53, 0xb6, 0x54, 0x46, 0xef, 0x02, 0x2c, 0xa3, 0x9b, 0xb3,
	0x20, 0x8a, 0xef, 0x1a, 0x0f, 0xa5, 0xd5, 0x5c, 0x46, 0x37, 0x2f, 0xa5, 0x02, 0x3d, 0x83, 0x87,
	0xf2, 0x4b, 0xfa, 0x26, 0x62, 0xab, 0x4b, 0x87, 0x93, 0x85, 0x4f, 0xa3, 0x40, 0xe0, 0x91, 0x7c,
	0xaf, 0xcc, 0x14, 0xf7, 0x2c, 0xa3, 0x6b, 0x82, 0xef, 0xcb, 0x24, 0xe4, 0x73, 0x7c, 0x00, 0x1e,
	0x85, 0x84, 0x79, 0x94, 0xe1, 0x07, 0xaa, 0x54, 0xa9, 0x6c, 0xfd, 0x04, 0x63, 0xc5, 0x97, 0x0b,
	0xd7, 0xf7, 0x82, 0x57, 0xbc, 0x46, 0x23, 0x9d, 0x6a, 0x84, 0xf9, 0xc1, 0x9d, 0xfd, 0x9b, 0xc3,
	0x2d, 0x34, 0xf0, 0x77, 0xf0, 0x20, 0x67, 0x4a, 0x48, 0xe7, 0x54, 0xa3, 0xcc, 0x76, 0xd0, 0x3f,
	0x28, 0x4e, 0xcb, 0xcc, 0x6f, 0x9a, 0x34, 0xff, 0x32, 0x60, 0xac, 0x07, 0x78, 0x83, 0xac, 0xf9,
	0x42, 0x67, 0xcd, 0x66, 0x55, 0xc8, 0x68, 0xf3, 0x33, 0x35, 0x3a, 0xea, 0x5f, 0xac, 0xce, 0x10,
	0x5f, 0xc3, 0x93, 0x02, 0xc0, 0x6b, 0x11, 0xe7, 0x1f, 0x06, 0x8c, 0x15, 0x71, 0xb6, 0x3e, 0x50,
	0xae, 0x3d, 0xba, 0xaf, 0xd1, 0x1e, 0x8b, 0x94, 0xf8, 0xda, 0x57, 0xe6, 0x1d, 0x78, 0x7c, 0x0b,
	0x22, 0x21, 0xcf, 0xbf, 0x3b, 0x30, 0xd2, 0x22, 0xbf, 0x65, 0xec, 0x79, 0x8b, 0xf1, 0x06, 0x55,
	0x8c, 0x67, 0x6a, 0x8c, 0x37, 0x86, 0x3e, 0x09, 0x9c, 0xe5, 0x9a, 0x60, 0x98, 0x1a, 0x87, 0x03,
	0x3b, 0x91, 0x32, 0x72, 0xda, 0xd9, 0x90, 0xd3, 0xfc, 0x9f, 0x1e, 0x0c, 0xd2, 0x61, 0x83, 0x22,
	0x18, 0x16, 0xb7, 0x37, 0x34, 0xbf, 0x7b, 0x38, 0x96, 0xad, 0x7a, 0x93, 0xa7, 0x35, 0x07, 0x6a,
	0x72, 0x63, 0xf7, 0xd0, 0x35, 0xec, 0x15, 0x96, 0x20, 0xf4, 0xfc, 0x4e, 0x84, 0xb2, 0x85, 0x6c,
	0x32, 0x6f, 0xe2, 0x92, 0x45, 0xa6, 0xb0, 0x9b, 0x37, 0xa1, 0x67, 0xb5, 0x51, 0xda, 0x25, 0x8b,
	0x7e, 0x2d, 0xee, 0x93, 0xe9, 0x27, 0x8d, 0x3e, 0xae, 0x1d, 0x58, 0x63, 0x81, 0xa6, 0x07, 0xe0,
	0x30, 0x2c, 0xee, 0x4f, 0x15, 0x57, 0x5c, 0xba, 0x6c, 0x35, 0x0d, 0x7a, 0x03, 0xc3, 0xe2, 0xae,
	0x53, 0x11, 0xb4, 0x74, 0xb5, 0x9a, 0x1c, 0x37, 0xf2, 0x51, 0xa1, 0xe7, 0xff, 0xf5, 0xc0, 0xcc,
	0xf8, 0x00, 0x5d, 0xc3, 0x48, 0x1b, 0xb7, 0xe8, 0xb8, 0x46, 0x87, 0xeb, 0x4c, 0x35, 0x99, 0xd5,
	0x65, 0xbe, 0xac, 0xd3, 0x7e, 0x86, 0x61, 0x71, 0x66, 0xa1, 0xea, 0x8e, 0xbd, 0x35, 0x41, 0x2b,
	0x4a, 0x50, 0x3e, 0x14, 0xad, 0x7b, 0x88, 0xa9, 0x0f, 0x6c, 0x93, 0xf4, 0xf3, 0xfa, 0x38, 0x2d,
	0x53, 0x46, 0xbf, 0x19, 0xda, 0x1a, 0x90, 0xf5, 0xfa, 0x27, 0xf5, 0x83, 0xeb, 0xcd, 0xde, 0xf4,
	0x10, 0x57, 0x30, 0xd2, 0x86, 0x5e, 0xc5, 0x7d, 0x97, 0x8f, 0xc8, 0xc6, 0x71, 0x7f, 0x81, 0x91,
	0x36, 0xa0, 0x50, 0x9d, 0xee, 0xbd, 0x15, 0xf7, 0xc3, 0x66, 0x4e, 0x2a, 0xfa, 0xb2, 0x2f, 0xff,
	0xa8, 0x1f, 0xff, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x1b, 0x37, 0x00, 0xe7, 0xe1, 0x0f, 0x00, 0x00,
}
