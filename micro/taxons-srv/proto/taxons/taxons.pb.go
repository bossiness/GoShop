// Code generated by protoc-gen-go. DO NOT EDIT.
// source: btdxcx.com/micro/taxons-srv/proto/taxons/taxons.proto

/*
Package com_btdxcx_micro_srv_taxons is a generated protocol buffer package.

It is generated from these files:
	btdxcx.com/micro/taxons-srv/proto/taxons/taxons.proto

It has these top-level messages:
	TaxonsRecord
	RootTaxonsRequest
	RootTaxonsResponse
	CreateTasonsRequest
	CreateTasonsResponse
	CreateChildrenTaxonsRequest
	CreateChildrenTaxonsResponse
	UpdateTaxonsRequest
	UpdateTaxonsResponse
	DeleteTasonsRequest
	DeleteTasonsResponse
	Image
	TaxonsMessage
	StreamingRequest
	StreamingResponse
	Ping
	Pong
	Message
*/
package com_btdxcx_micro_srv_taxons

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TaxonsRecord struct {
	Code        string   `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
	Name        string   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Description string   `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	Position    int32    `protobuf:"varint,4,opt,name=position" json:"position"`
	Images      []*Image `protobuf:"bytes,5,rep,name=images" json:"images,omitempty"`
}

func (m *TaxonsRecord) Reset()                    { *m = TaxonsRecord{} }
func (m *TaxonsRecord) String() string            { return proto.CompactTextString(m) }
func (*TaxonsRecord) ProtoMessage()               {}
func (*TaxonsRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TaxonsRecord) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *TaxonsRecord) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TaxonsRecord) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TaxonsRecord) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *TaxonsRecord) GetImages() []*Image {
	if m != nil {
		return m.Images
	}
	return nil
}

type RootTaxonsRequest struct {
	ShopID string `protobuf:"bytes,1,opt,name=shopID" json:"shopID,omitempty"`
}

func (m *RootTaxonsRequest) Reset()                    { *m = RootTaxonsRequest{} }
func (m *RootTaxonsRequest) String() string            { return proto.CompactTextString(m) }
func (*RootTaxonsRequest) ProtoMessage()               {}
func (*RootTaxonsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RootTaxonsRequest) GetShopID() string {
	if m != nil {
		return m.ShopID
	}
	return ""
}

type RootTaxonsResponse struct {
	Message *TaxonsMessage `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *RootTaxonsResponse) Reset()                    { *m = RootTaxonsResponse{} }
func (m *RootTaxonsResponse) String() string            { return proto.CompactTextString(m) }
func (*RootTaxonsResponse) ProtoMessage()               {}
func (*RootTaxonsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RootTaxonsResponse) GetMessage() *TaxonsMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

type CreateTasonsRequest struct {
	ShopID string        `protobuf:"bytes,1,opt,name=shopID" json:"shopID,omitempty"`
	Record *TaxonsRecord `protobuf:"bytes,2,opt,name=record" json:"record,omitempty"`
}

func (m *CreateTasonsRequest) Reset()                    { *m = CreateTasonsRequest{} }
func (m *CreateTasonsRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateTasonsRequest) ProtoMessage()               {}
func (*CreateTasonsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CreateTasonsRequest) GetShopID() string {
	if m != nil {
		return m.ShopID
	}
	return ""
}

func (m *CreateTasonsRequest) GetRecord() *TaxonsRecord {
	if m != nil {
		return m.Record
	}
	return nil
}

type CreateTasonsResponse struct {
	Record *TaxonsRecord `protobuf:"bytes,1,opt,name=record" json:"record,omitempty"`
}

func (m *CreateTasonsResponse) Reset()                    { *m = CreateTasonsResponse{} }
func (m *CreateTasonsResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateTasonsResponse) ProtoMessage()               {}
func (*CreateTasonsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CreateTasonsResponse) GetRecord() *TaxonsRecord {
	if m != nil {
		return m.Record
	}
	return nil
}

type CreateChildrenTaxonsRequest struct {
	ShopID string        `protobuf:"bytes,1,opt,name=shopID" json:"shopID,omitempty"`
	Code   string        `protobuf:"bytes,2,opt,name=code" json:"code,omitempty"`
	Record *TaxonsRecord `protobuf:"bytes,3,opt,name=record" json:"record,omitempty"`
}

func (m *CreateChildrenTaxonsRequest) Reset()                    { *m = CreateChildrenTaxonsRequest{} }
func (m *CreateChildrenTaxonsRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateChildrenTaxonsRequest) ProtoMessage()               {}
func (*CreateChildrenTaxonsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CreateChildrenTaxonsRequest) GetShopID() string {
	if m != nil {
		return m.ShopID
	}
	return ""
}

func (m *CreateChildrenTaxonsRequest) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *CreateChildrenTaxonsRequest) GetRecord() *TaxonsRecord {
	if m != nil {
		return m.Record
	}
	return nil
}

type CreateChildrenTaxonsResponse struct {
	Record *TaxonsRecord `protobuf:"bytes,1,opt,name=record" json:"record,omitempty"`
}

func (m *CreateChildrenTaxonsResponse) Reset()                    { *m = CreateChildrenTaxonsResponse{} }
func (m *CreateChildrenTaxonsResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateChildrenTaxonsResponse) ProtoMessage()               {}
func (*CreateChildrenTaxonsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CreateChildrenTaxonsResponse) GetRecord() *TaxonsRecord {
	if m != nil {
		return m.Record
	}
	return nil
}

type UpdateTaxonsRequest struct {
	ShopID string        `protobuf:"bytes,1,opt,name=shopID" json:"shopID,omitempty"`
	Code   string        `protobuf:"bytes,2,opt,name=code" json:"code,omitempty"`
	Record *TaxonsRecord `protobuf:"bytes,3,opt,name=record" json:"record,omitempty"`
}

func (m *UpdateTaxonsRequest) Reset()                    { *m = UpdateTaxonsRequest{} }
func (m *UpdateTaxonsRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateTaxonsRequest) ProtoMessage()               {}
func (*UpdateTaxonsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *UpdateTaxonsRequest) GetShopID() string {
	if m != nil {
		return m.ShopID
	}
	return ""
}

func (m *UpdateTaxonsRequest) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *UpdateTaxonsRequest) GetRecord() *TaxonsRecord {
	if m != nil {
		return m.Record
	}
	return nil
}

type UpdateTaxonsResponse struct {
	Record *TaxonsRecord `protobuf:"bytes,1,opt,name=record" json:"record,omitempty"`
}

func (m *UpdateTaxonsResponse) Reset()                    { *m = UpdateTaxonsResponse{} }
func (m *UpdateTaxonsResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateTaxonsResponse) ProtoMessage()               {}
func (*UpdateTaxonsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *UpdateTaxonsResponse) GetRecord() *TaxonsRecord {
	if m != nil {
		return m.Record
	}
	return nil
}

type DeleteTasonsRequest struct {
	ShopID string `protobuf:"bytes,1,opt,name=shopID" json:"shopID,omitempty"`
	Code   string `protobuf:"bytes,2,opt,name=code" json:"code,omitempty"`
}

func (m *DeleteTasonsRequest) Reset()                    { *m = DeleteTasonsRequest{} }
func (m *DeleteTasonsRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteTasonsRequest) ProtoMessage()               {}
func (*DeleteTasonsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *DeleteTasonsRequest) GetShopID() string {
	if m != nil {
		return m.ShopID
	}
	return ""
}

func (m *DeleteTasonsRequest) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

type DeleteTasonsResponse struct {
}

func (m *DeleteTasonsResponse) Reset()                    { *m = DeleteTasonsResponse{} }
func (m *DeleteTasonsResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteTasonsResponse) ProtoMessage()               {}
func (*DeleteTasonsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type Image struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Code string `protobuf:"bytes,2,opt,name=code" json:"code,omitempty"`
	Path string `protobuf:"bytes,3,opt,name=path" json:"path,omitempty"`
}

func (m *Image) Reset()                    { *m = Image{} }
func (m *Image) String() string            { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()               {}
func (*Image) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Image) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Image) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Image) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type TaxonsMessage struct {
	ShopID      string           `protobuf:"bytes,1,opt,name=shopID" json:"shopID,omitempty"`
	Code        string           `protobuf:"bytes,2,opt,name=code" json:"code,omitempty"`
	Name        string           `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Description string           `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	Position    int32            `protobuf:"varint,5,opt,name=position" json:"position,omitempty"`
	Images      []*Image         `protobuf:"bytes,6,rep,name=images" json:"images,omitempty"`
	Children    []*TaxonsMessage `protobuf:"bytes,7,rep,name=children" json:"children,omitempty"`
}

func (m *TaxonsMessage) Reset()                    { *m = TaxonsMessage{} }
func (m *TaxonsMessage) String() string            { return proto.CompactTextString(m) }
func (*TaxonsMessage) ProtoMessage()               {}
func (*TaxonsMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *TaxonsMessage) GetShopID() string {
	if m != nil {
		return m.ShopID
	}
	return ""
}

func (m *TaxonsMessage) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *TaxonsMessage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TaxonsMessage) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TaxonsMessage) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *TaxonsMessage) GetImages() []*Image {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *TaxonsMessage) GetChildren() []*TaxonsMessage {
	if m != nil {
		return m.Children
	}
	return nil
}

type StreamingRequest struct {
	Count int64 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
}

func (m *StreamingRequest) Reset()                    { *m = StreamingRequest{} }
func (m *StreamingRequest) String() string            { return proto.CompactTextString(m) }
func (*StreamingRequest) ProtoMessage()               {}
func (*StreamingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *StreamingRequest) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type StreamingResponse struct {
	Count int64 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
}

func (m *StreamingResponse) Reset()                    { *m = StreamingResponse{} }
func (m *StreamingResponse) String() string            { return proto.CompactTextString(m) }
func (*StreamingResponse) ProtoMessage()               {}
func (*StreamingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *StreamingResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type Ping struct {
	Stroke int64 `protobuf:"varint,1,opt,name=stroke" json:"stroke,omitempty"`
}

func (m *Ping) Reset()                    { *m = Ping{} }
func (m *Ping) String() string            { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()               {}
func (*Ping) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *Ping) GetStroke() int64 {
	if m != nil {
		return m.Stroke
	}
	return 0
}

type Pong struct {
	Stroke int64 `protobuf:"varint,1,opt,name=stroke" json:"stroke,omitempty"`
}

func (m *Pong) Reset()                    { *m = Pong{} }
func (m *Pong) String() string            { return proto.CompactTextString(m) }
func (*Pong) ProtoMessage()               {}
func (*Pong) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *Pong) GetStroke() int64 {
	if m != nil {
		return m.Stroke
	}
	return 0
}

type Message struct {
	Say string `protobuf:"bytes,1,opt,name=say" json:"say,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *Message) GetSay() string {
	if m != nil {
		return m.Say
	}
	return ""
}

func init() {
	proto.RegisterType((*TaxonsRecord)(nil), "com.btdxcx.micro.srv.taxons.TaxonsRecord")
	proto.RegisterType((*RootTaxonsRequest)(nil), "com.btdxcx.micro.srv.taxons.RootTaxonsRequest")
	proto.RegisterType((*RootTaxonsResponse)(nil), "com.btdxcx.micro.srv.taxons.RootTaxonsResponse")
	proto.RegisterType((*CreateTasonsRequest)(nil), "com.btdxcx.micro.srv.taxons.CreateTasonsRequest")
	proto.RegisterType((*CreateTasonsResponse)(nil), "com.btdxcx.micro.srv.taxons.CreateTasonsResponse")
	proto.RegisterType((*CreateChildrenTaxonsRequest)(nil), "com.btdxcx.micro.srv.taxons.CreateChildrenTaxonsRequest")
	proto.RegisterType((*CreateChildrenTaxonsResponse)(nil), "com.btdxcx.micro.srv.taxons.CreateChildrenTaxonsResponse")
	proto.RegisterType((*UpdateTaxonsRequest)(nil), "com.btdxcx.micro.srv.taxons.UpdateTaxonsRequest")
	proto.RegisterType((*UpdateTaxonsResponse)(nil), "com.btdxcx.micro.srv.taxons.UpdateTaxonsResponse")
	proto.RegisterType((*DeleteTasonsRequest)(nil), "com.btdxcx.micro.srv.taxons.DeleteTasonsRequest")
	proto.RegisterType((*DeleteTasonsResponse)(nil), "com.btdxcx.micro.srv.taxons.DeleteTasonsResponse")
	proto.RegisterType((*Image)(nil), "com.btdxcx.micro.srv.taxons.Image")
	proto.RegisterType((*TaxonsMessage)(nil), "com.btdxcx.micro.srv.taxons.TaxonsMessage")
	proto.RegisterType((*StreamingRequest)(nil), "com.btdxcx.micro.srv.taxons.StreamingRequest")
	proto.RegisterType((*StreamingResponse)(nil), "com.btdxcx.micro.srv.taxons.StreamingResponse")
	proto.RegisterType((*Ping)(nil), "com.btdxcx.micro.srv.taxons.Ping")
	proto.RegisterType((*Pong)(nil), "com.btdxcx.micro.srv.taxons.Pong")
	proto.RegisterType((*Message)(nil), "com.btdxcx.micro.srv.taxons.Message")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Taxons service

type TaxonsClient interface {
	RootTaxons(ctx context.Context, in *RootTaxonsRequest, opts ...client.CallOption) (*RootTaxonsResponse, error)
	CreateTaxons(ctx context.Context, in *CreateTasonsRequest, opts ...client.CallOption) (*CreateTasonsResponse, error)
	CreateChildrenTaxons(ctx context.Context, in *CreateChildrenTaxonsRequest, opts ...client.CallOption) (*CreateChildrenTaxonsResponse, error)
	UpdateTaxons(ctx context.Context, in *UpdateTaxonsRequest, opts ...client.CallOption) (*UpdateTaxonsResponse, error)
	DeleteTaxons(ctx context.Context, in *DeleteTasonsRequest, opts ...client.CallOption) (*DeleteTasonsResponse, error)
	Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (Taxons_StreamClient, error)
	PingPong(ctx context.Context, opts ...client.CallOption) (Taxons_PingPongClient, error)
}

type taxonsClient struct {
	c           client.Client
	serviceName string
}

func NewTaxonsClient(serviceName string, c client.Client) TaxonsClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "com.btdxcx.micro.srv.taxons"
	}
	return &taxonsClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *taxonsClient) RootTaxons(ctx context.Context, in *RootTaxonsRequest, opts ...client.CallOption) (*RootTaxonsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Taxons.RootTaxons", in)
	out := new(RootTaxonsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxonsClient) CreateTaxons(ctx context.Context, in *CreateTasonsRequest, opts ...client.CallOption) (*CreateTasonsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Taxons.CreateTaxons", in)
	out := new(CreateTasonsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxonsClient) CreateChildrenTaxons(ctx context.Context, in *CreateChildrenTaxonsRequest, opts ...client.CallOption) (*CreateChildrenTaxonsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Taxons.CreateChildrenTaxons", in)
	out := new(CreateChildrenTaxonsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxonsClient) UpdateTaxons(ctx context.Context, in *UpdateTaxonsRequest, opts ...client.CallOption) (*UpdateTaxonsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Taxons.UpdateTaxons", in)
	out := new(UpdateTaxonsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxonsClient) DeleteTaxons(ctx context.Context, in *DeleteTasonsRequest, opts ...client.CallOption) (*DeleteTasonsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Taxons.DeleteTaxons", in)
	out := new(DeleteTasonsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxonsClient) Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (Taxons_StreamClient, error) {
	req := c.c.NewRequest(c.serviceName, "Taxons.Stream", &StreamingRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &taxonsStreamClient{stream}, nil
}

type Taxons_StreamClient interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*StreamingResponse, error)
}

type taxonsStreamClient struct {
	stream client.Streamer
}

func (x *taxonsStreamClient) Close() error {
	return x.stream.Close()
}

func (x *taxonsStreamClient) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *taxonsStreamClient) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *taxonsStreamClient) Recv() (*StreamingResponse, error) {
	m := new(StreamingResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *taxonsClient) PingPong(ctx context.Context, opts ...client.CallOption) (Taxons_PingPongClient, error) {
	req := c.c.NewRequest(c.serviceName, "Taxons.PingPong", &Ping{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &taxonsPingPongClient{stream}, nil
}

type Taxons_PingPongClient interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Ping) error
	Recv() (*Pong, error)
}

type taxonsPingPongClient struct {
	stream client.Streamer
}

func (x *taxonsPingPongClient) Close() error {
	return x.stream.Close()
}

func (x *taxonsPingPongClient) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *taxonsPingPongClient) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *taxonsPingPongClient) Send(m *Ping) error {
	return x.stream.Send(m)
}

func (x *taxonsPingPongClient) Recv() (*Pong, error) {
	m := new(Pong)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Taxons service

type TaxonsHandler interface {
	RootTaxons(context.Context, *RootTaxonsRequest, *RootTaxonsResponse) error
	CreateTaxons(context.Context, *CreateTasonsRequest, *CreateTasonsResponse) error
	CreateChildrenTaxons(context.Context, *CreateChildrenTaxonsRequest, *CreateChildrenTaxonsResponse) error
	UpdateTaxons(context.Context, *UpdateTaxonsRequest, *UpdateTaxonsResponse) error
	DeleteTaxons(context.Context, *DeleteTasonsRequest, *DeleteTasonsResponse) error
	Stream(context.Context, *StreamingRequest, Taxons_StreamStream) error
	PingPong(context.Context, Taxons_PingPongStream) error
}

func RegisterTaxonsHandler(s server.Server, hdlr TaxonsHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Taxons{hdlr}, opts...))
}

type Taxons struct {
	TaxonsHandler
}

func (h *Taxons) RootTaxons(ctx context.Context, in *RootTaxonsRequest, out *RootTaxonsResponse) error {
	return h.TaxonsHandler.RootTaxons(ctx, in, out)
}

func (h *Taxons) CreateTaxons(ctx context.Context, in *CreateTasonsRequest, out *CreateTasonsResponse) error {
	return h.TaxonsHandler.CreateTaxons(ctx, in, out)
}

func (h *Taxons) CreateChildrenTaxons(ctx context.Context, in *CreateChildrenTaxonsRequest, out *CreateChildrenTaxonsResponse) error {
	return h.TaxonsHandler.CreateChildrenTaxons(ctx, in, out)
}

func (h *Taxons) UpdateTaxons(ctx context.Context, in *UpdateTaxonsRequest, out *UpdateTaxonsResponse) error {
	return h.TaxonsHandler.UpdateTaxons(ctx, in, out)
}

func (h *Taxons) DeleteTaxons(ctx context.Context, in *DeleteTasonsRequest, out *DeleteTasonsResponse) error {
	return h.TaxonsHandler.DeleteTaxons(ctx, in, out)
}

func (h *Taxons) Stream(ctx context.Context, stream server.Streamer) error {
	m := new(StreamingRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.TaxonsHandler.Stream(ctx, m, &taxonsStreamStream{stream})
}

type Taxons_StreamStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*StreamingResponse) error
}

type taxonsStreamStream struct {
	stream server.Streamer
}

func (x *taxonsStreamStream) Close() error {
	return x.stream.Close()
}

func (x *taxonsStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *taxonsStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *taxonsStreamStream) Send(m *StreamingResponse) error {
	return x.stream.Send(m)
}

func (h *Taxons) PingPong(ctx context.Context, stream server.Streamer) error {
	return h.TaxonsHandler.PingPong(ctx, &taxonsPingPongStream{stream})
}

type Taxons_PingPongStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Pong) error
	Recv() (*Ping, error)
}

type taxonsPingPongStream struct {
	stream server.Streamer
}

func (x *taxonsPingPongStream) Close() error {
	return x.stream.Close()
}

func (x *taxonsPingPongStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *taxonsPingPongStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *taxonsPingPongStream) Send(m *Pong) error {
	return x.stream.Send(m)
}

func (x *taxonsPingPongStream) Recv() (*Ping, error) {
	m := new(Ping)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func init() {
	proto.RegisterFile("btdxcx.com/micro/taxons-srv/proto/taxons/taxons.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 652 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0x4b, 0x6f, 0xd3, 0x40,
	0x10, 0xae, 0xe3, 0xc4, 0x0d, 0x93, 0x80, 0xda, 0x4d, 0x54, 0x45, 0x0e, 0x42, 0x61, 0x4f, 0x29,
	0xa8, 0x4e, 0x08, 0x42, 0x02, 0x2e, 0xa8, 0x6a, 0x84, 0xd4, 0x03, 0x12, 0x32, 0x05, 0xa9, 0xdc,
	0x5c, 0x7b, 0x95, 0x58, 0xad, 0xbd, 0x66, 0x77, 0x5b, 0x85, 0x3b, 0x37, 0xb8, 0xf0, 0x3b, 0xb8,
	0xf0, 0x13, 0x91, 0x77, 0xd7, 0x79, 0x80, 0xeb, 0x38, 0x51, 0x25, 0x4e, 0xde, 0xc7, 0x7c, 0xf3,
	0xf8, 0x76, 0xe6, 0x93, 0xe1, 0xc5, 0x85, 0x08, 0x66, 0xfe, 0xcc, 0xf1, 0x69, 0x34, 0x88, 0x42,
	0x9f, 0xd1, 0x81, 0xf0, 0x66, 0x34, 0xe6, 0x47, 0x9c, 0xdd, 0x0c, 0x12, 0x46, 0x45, 0x76, 0xa0,
	0x3f, 0x8e, 0x3c, 0x43, 0x5d, 0x9f, 0x46, 0x8e, 0x86, 0x4a, 0x98, 0xc3, 0xd9, 0x8d, 0xa3, 0x4c,
	0xf0, 0x6f, 0x03, 0x9a, 0x67, 0x72, 0xe9, 0x12, 0x9f, 0xb2, 0x00, 0x21, 0xa8, 0xfa, 0x34, 0x20,
	0x1d, 0xa3, 0x67, 0xf4, 0xef, 0xb9, 0x72, 0x9d, 0x9e, 0xc5, 0x5e, 0x44, 0x3a, 0x15, 0x75, 0x96,
	0xae, 0x51, 0x0f, 0x1a, 0x01, 0xe1, 0x3e, 0x0b, 0x13, 0x11, 0xd2, 0xb8, 0x63, 0xca, 0xab, 0xe5,
	0x23, 0x64, 0x43, 0x3d, 0xa1, 0x3c, 0x94, 0xd7, 0xd5, 0x9e, 0xd1, 0xaf, 0xb9, 0xf3, 0x3d, 0x7a,
	0x0d, 0x56, 0x18, 0x79, 0x13, 0xc2, 0x3b, 0xb5, 0x9e, 0xd9, 0x6f, 0x8c, 0xb0, 0x53, 0x90, 0xa4,
	0x73, 0x9a, 0x9a, 0xba, 0x1a, 0x81, 0x9f, 0xc2, 0xbe, 0x4b, 0xa9, 0xc8, 0xb2, 0xfe, 0x72, 0x4d,
	0xb8, 0x40, 0x07, 0x60, 0xf1, 0x29, 0x4d, 0x4e, 0xc7, 0x3a, 0x71, 0xbd, 0xc3, 0x9f, 0x01, 0x2d,
	0x1b, 0xf3, 0x84, 0xc6, 0x9c, 0xa0, 0x31, 0xec, 0x46, 0x84, 0x73, 0x6f, 0xa2, 0xea, 0x6c, 0x8c,
	0x9e, 0x14, 0xc6, 0x57, 0xe8, 0x77, 0x0a, 0xe1, 0x66, 0x50, 0x9c, 0x40, 0xeb, 0x84, 0x11, 0x4f,
	0x90, 0x33, 0x8f, 0xaf, 0x4f, 0x05, 0x1d, 0x83, 0xc5, 0x24, 0xc7, 0x92, 0xc7, 0xc6, 0xe8, 0xb0,
	0x44, 0x4c, 0xf5, 0x28, 0xae, 0x06, 0xe2, 0x73, 0x68, 0xaf, 0x46, 0xd4, 0xf5, 0x2c, 0x5c, 0x1b,
	0xdb, 0xba, 0xfe, 0x61, 0x40, 0x57, 0xf9, 0x3e, 0x99, 0x86, 0x57, 0x01, 0x23, 0x71, 0x29, 0x82,
	0xe7, 0xfd, 0x52, 0x59, 0xea, 0x97, 0x45, 0x3a, 0xe6, 0xb6, 0xe9, 0x78, 0xf0, 0x30, 0x3f, 0x9b,
	0xbb, 0xab, 0xf8, 0x9b, 0x01, 0xad, 0x8f, 0x49, 0x20, 0xd9, 0xfc, 0x8f, 0x95, 0x9e, 0x43, 0x7b,
	0x35, 0x8b, 0xbb, 0xab, 0xf0, 0x18, 0x5a, 0x63, 0x72, 0x45, 0xca, 0x36, 0x68, 0x4e, 0x81, 0xf8,
	0x00, 0xda, 0xab, 0x2e, 0x54, 0x76, 0xf8, 0x0d, 0xd4, 0xe4, 0x54, 0xa2, 0x07, 0x50, 0x09, 0x03,
	0xed, 0xa8, 0x12, 0x06, 0xb9, 0x2c, 0x21, 0xa8, 0x26, 0x9e, 0x98, 0x6a, 0x91, 0x90, 0x6b, 0xfc,
	0xb3, 0x02, 0xf7, 0x57, 0xe6, 0x6a, 0x23, 0xde, 0x33, 0x45, 0x32, 0x6f, 0x57, 0xa4, 0x6a, 0xb1,
	0x22, 0xd5, 0x6e, 0x55, 0x24, 0x6b, 0x53, 0x45, 0x42, 0x6f, 0xa1, 0xee, 0xeb, 0x36, 0xed, 0xec,
	0x4a, 0xf4, 0x26, 0x7a, 0x32, 0xc7, 0xe2, 0x3e, 0xec, 0x7d, 0x10, 0x8c, 0x78, 0x51, 0x18, 0x4f,
	0xb2, 0xc7, 0x6a, 0x43, 0xcd, 0xa7, 0xd7, 0xb1, 0x90, 0xa4, 0x98, 0xae, 0xda, 0xe0, 0x43, 0xd8,
	0x5f, 0xb2, 0xd4, 0x1d, 0x93, 0x6f, 0xfa, 0x08, 0xaa, 0xef, 0xc3, 0x78, 0x22, 0xe9, 0x15, 0x8c,
	0x5e, 0x12, 0x7d, 0xad, 0x77, 0xf2, 0x9e, 0x16, 0xdc, 0x77, 0x61, 0x37, 0x7b, 0xa1, 0x3d, 0x30,
	0xb9, 0xf7, 0x55, 0x3f, 0x4f, 0xba, 0x1c, 0xfd, 0xb2, 0xc0, 0x52, 0xd5, 0x20, 0x0a, 0xb0, 0x50,
	0x5a, 0xe4, 0x14, 0x12, 0xf0, 0x8f, 0x7e, 0xdb, 0x83, 0xd2, 0xf6, 0xba, 0x01, 0x77, 0x10, 0x87,
	0x66, 0x26, 0x86, 0x32, 0xe4, 0xb0, 0xd0, 0x45, 0x8e, 0x52, 0xdb, 0xcf, 0x36, 0x40, 0x68, 0x8e,
	0xbf, 0x1b, 0x99, 0x04, 0xaf, 0x0a, 0x13, 0x7a, 0x59, 0xc2, 0x57, 0xae, 0xb2, 0xda, 0xaf, 0xb6,
	0x40, 0xea, 0x6c, 0x38, 0x34, 0x97, 0xb5, 0x63, 0x0d, 0x05, 0x39, 0x62, 0xb7, 0x86, 0x82, 0x5c,
	0x61, 0xe2, 0xd0, 0xcc, 0x24, 0xa1, 0x44, 0xd0, 0x1c, 0x01, 0x5a, 0x13, 0x34, 0x4f, 0x6f, 0xd0,
	0x25, 0x58, 0xaa, 0xe1, 0xd1, 0x51, 0x21, 0xf8, 0xef, 0xf9, 0xb1, 0x9d, 0xb2, 0xe6, 0x59, 0x5f,
	0x0d, 0x0d, 0xf4, 0x09, 0xea, 0xe9, 0xc8, 0xc8, 0xb1, 0x78, 0x5c, 0x88, 0x4f, 0xcd, 0xec, 0x35,
	0x26, 0x34, 0x9e, 0xe0, 0x9d, 0xbe, 0x31, 0x34, 0x2e, 0x2c, 0xf9, 0x43, 0xf6, 0xfc, 0x4f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xb5, 0xad, 0x89, 0xdd, 0xc9, 0x09, 0x00, 0x00,
}
