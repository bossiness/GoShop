// Code generated by protoc-gen-go. DO NOT EDIT.
// source: btdxcx.com/micro/taxons-srv/proto/imp/imp.proto

/*
Package com_btdxcx_shop_srv_taxons is a generated protocol buffer package.

It is generated from these files:
	btdxcx.com/micro/taxons-srv/proto/imp/imp.proto

It has these top-level messages:
	Message
	TaxonsShopIDRequest
	TasonsDeleteRequest
	TasonsCodeResponse
	TasonsCreateRequest
	TaxonsRequest
	TaxonsResponse
	Image
	TaxonsMessage
	StreamingRequest
	StreamingResponse
	Ping
	Pong
*/
package com_btdxcx_shop_srv_taxons

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Message struct {
	Say string `protobuf:"bytes,1,opt,name=say" json:"say,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Message) GetSay() string {
	if m != nil {
		return m.Say
	}
	return ""
}

type TaxonsShopIDRequest struct {
	ShopID string `protobuf:"bytes,1,opt,name=shopID" json:"shopID,omitempty"`
}

func (m *TaxonsShopIDRequest) Reset()                    { *m = TaxonsShopIDRequest{} }
func (m *TaxonsShopIDRequest) String() string            { return proto.CompactTextString(m) }
func (*TaxonsShopIDRequest) ProtoMessage()               {}
func (*TaxonsShopIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TaxonsShopIDRequest) GetShopID() string {
	if m != nil {
		return m.ShopID
	}
	return ""
}

type TasonsDeleteRequest struct {
	ShopID string `protobuf:"bytes,1,opt,name=shopID" json:"shopID,omitempty"`
	Code   string `protobuf:"bytes,2,opt,name=code" json:"code,omitempty"`
}

func (m *TasonsDeleteRequest) Reset()                    { *m = TasonsDeleteRequest{} }
func (m *TasonsDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*TasonsDeleteRequest) ProtoMessage()               {}
func (*TasonsDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TasonsDeleteRequest) GetShopID() string {
	if m != nil {
		return m.ShopID
	}
	return ""
}

func (m *TasonsDeleteRequest) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

type TasonsCodeResponse struct {
	Code string `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
}

func (m *TasonsCodeResponse) Reset()                    { *m = TasonsCodeResponse{} }
func (m *TasonsCodeResponse) String() string            { return proto.CompactTextString(m) }
func (*TasonsCodeResponse) ProtoMessage()               {}
func (*TasonsCodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TasonsCodeResponse) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

type TasonsCreateRequest struct {
	ShopID      string   `protobuf:"bytes,1,opt,name=shopID" json:"shopID,omitempty"`
	Name        string   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Description string   `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	Images      []*Image `protobuf:"bytes,4,rep,name=images" json:"images,omitempty"`
}

func (m *TasonsCreateRequest) Reset()                    { *m = TasonsCreateRequest{} }
func (m *TasonsCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*TasonsCreateRequest) ProtoMessage()               {}
func (*TasonsCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *TasonsCreateRequest) GetShopID() string {
	if m != nil {
		return m.ShopID
	}
	return ""
}

func (m *TasonsCreateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TasonsCreateRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TasonsCreateRequest) GetImages() []*Image {
	if m != nil {
		return m.Images
	}
	return nil
}

type TaxonsRequest struct {
	ShopID      string   `protobuf:"bytes,1,opt,name=shopID" json:"shopID,omitempty"`
	Code        string   `protobuf:"bytes,2,opt,name=code" json:"code,omitempty"`
	Name        string   `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Description string   `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	Images      []*Image `protobuf:"bytes,5,rep,name=images" json:"images,omitempty"`
}

func (m *TaxonsRequest) Reset()                    { *m = TaxonsRequest{} }
func (m *TaxonsRequest) String() string            { return proto.CompactTextString(m) }
func (*TaxonsRequest) ProtoMessage()               {}
func (*TaxonsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *TaxonsRequest) GetShopID() string {
	if m != nil {
		return m.ShopID
	}
	return ""
}

func (m *TaxonsRequest) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *TaxonsRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TaxonsRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TaxonsRequest) GetImages() []*Image {
	if m != nil {
		return m.Images
	}
	return nil
}

type TaxonsResponse struct {
	Message *TaxonsMessage `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *TaxonsResponse) Reset()                    { *m = TaxonsResponse{} }
func (m *TaxonsResponse) String() string            { return proto.CompactTextString(m) }
func (*TaxonsResponse) ProtoMessage()               {}
func (*TaxonsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *TaxonsResponse) GetMessage() *TaxonsMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

type Image struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Code string `protobuf:"bytes,2,opt,name=code" json:"code,omitempty"`
	Path string `protobuf:"bytes,3,opt,name=path" json:"path,omitempty"`
}

func (m *Image) Reset()                    { *m = Image{} }
func (m *Image) String() string            { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()               {}
func (*Image) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Image) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Image) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Image) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type TaxonsMessage struct {
	ShopID      string           `protobuf:"bytes,1,opt,name=shopID" json:"shopID,omitempty"`
	Code        string           `protobuf:"bytes,2,opt,name=code" json:"code,omitempty"`
	Name        string           `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Description string           `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	Images      []*Image         `protobuf:"bytes,5,rep,name=images" json:"images,omitempty"`
	Children    []*TaxonsMessage `protobuf:"bytes,6,rep,name=children" json:"children,omitempty"`
}

func (m *TaxonsMessage) Reset()                    { *m = TaxonsMessage{} }
func (m *TaxonsMessage) String() string            { return proto.CompactTextString(m) }
func (*TaxonsMessage) ProtoMessage()               {}
func (*TaxonsMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *TaxonsMessage) GetShopID() string {
	if m != nil {
		return m.ShopID
	}
	return ""
}

func (m *TaxonsMessage) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *TaxonsMessage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TaxonsMessage) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TaxonsMessage) GetImages() []*Image {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *TaxonsMessage) GetChildren() []*TaxonsMessage {
	if m != nil {
		return m.Children
	}
	return nil
}

type StreamingRequest struct {
	Count int64 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
}

func (m *StreamingRequest) Reset()                    { *m = StreamingRequest{} }
func (m *StreamingRequest) String() string            { return proto.CompactTextString(m) }
func (*StreamingRequest) ProtoMessage()               {}
func (*StreamingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *StreamingRequest) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type StreamingResponse struct {
	Count int64 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
}

func (m *StreamingResponse) Reset()                    { *m = StreamingResponse{} }
func (m *StreamingResponse) String() string            { return proto.CompactTextString(m) }
func (*StreamingResponse) ProtoMessage()               {}
func (*StreamingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *StreamingResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type Ping struct {
	Stroke int64 `protobuf:"varint,1,opt,name=stroke" json:"stroke,omitempty"`
}

func (m *Ping) Reset()                    { *m = Ping{} }
func (m *Ping) String() string            { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()               {}
func (*Ping) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Ping) GetStroke() int64 {
	if m != nil {
		return m.Stroke
	}
	return 0
}

type Pong struct {
	Stroke int64 `protobuf:"varint,1,opt,name=stroke" json:"stroke,omitempty"`
}

func (m *Pong) Reset()                    { *m = Pong{} }
func (m *Pong) String() string            { return proto.CompactTextString(m) }
func (*Pong) ProtoMessage()               {}
func (*Pong) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Pong) GetStroke() int64 {
	if m != nil {
		return m.Stroke
	}
	return 0
}

func init() {
	proto.RegisterType((*Message)(nil), "com.btdxcx.shop.srv.taxons.Message")
	proto.RegisterType((*TaxonsShopIDRequest)(nil), "com.btdxcx.shop.srv.taxons.TaxonsShopIDRequest")
	proto.RegisterType((*TasonsDeleteRequest)(nil), "com.btdxcx.shop.srv.taxons.TasonsDeleteRequest")
	proto.RegisterType((*TasonsCodeResponse)(nil), "com.btdxcx.shop.srv.taxons.TasonsCodeResponse")
	proto.RegisterType((*TasonsCreateRequest)(nil), "com.btdxcx.shop.srv.taxons.TasonsCreateRequest")
	proto.RegisterType((*TaxonsRequest)(nil), "com.btdxcx.shop.srv.taxons.TaxonsRequest")
	proto.RegisterType((*TaxonsResponse)(nil), "com.btdxcx.shop.srv.taxons.TaxonsResponse")
	proto.RegisterType((*Image)(nil), "com.btdxcx.shop.srv.taxons.Image")
	proto.RegisterType((*TaxonsMessage)(nil), "com.btdxcx.shop.srv.taxons.TaxonsMessage")
	proto.RegisterType((*StreamingRequest)(nil), "com.btdxcx.shop.srv.taxons.StreamingRequest")
	proto.RegisterType((*StreamingResponse)(nil), "com.btdxcx.shop.srv.taxons.StreamingResponse")
	proto.RegisterType((*Ping)(nil), "com.btdxcx.shop.srv.taxons.Ping")
	proto.RegisterType((*Pong)(nil), "com.btdxcx.shop.srv.taxons.Pong")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Taxons service

type TaxonsClient interface {
	Root(ctx context.Context, in *TaxonsShopIDRequest, opts ...client.CallOption) (*TaxonsMessage, error)
	Create(ctx context.Context, in *TasonsCreateRequest, opts ...client.CallOption) (*TasonsCodeResponse, error)
	CreateChildren(ctx context.Context, in *TaxonsRequest, opts ...client.CallOption) (*TasonsCodeResponse, error)
	Update(ctx context.Context, in *TaxonsRequest, opts ...client.CallOption) (*TasonsCodeResponse, error)
	Delete(ctx context.Context, in *TasonsDeleteRequest, opts ...client.CallOption) (*TasonsCodeResponse, error)
	Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (Taxons_StreamClient, error)
	PingPong(ctx context.Context, opts ...client.CallOption) (Taxons_PingPongClient, error)
}

type taxonsClient struct {
	c           client.Client
	serviceName string
}

func NewTaxonsClient(serviceName string, c client.Client) TaxonsClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "com.btdxcx.shop.srv.taxons"
	}
	return &taxonsClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *taxonsClient) Root(ctx context.Context, in *TaxonsShopIDRequest, opts ...client.CallOption) (*TaxonsMessage, error) {
	req := c.c.NewRequest(c.serviceName, "Taxons.Root", in)
	out := new(TaxonsMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxonsClient) Create(ctx context.Context, in *TasonsCreateRequest, opts ...client.CallOption) (*TasonsCodeResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Taxons.Create", in)
	out := new(TasonsCodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxonsClient) CreateChildren(ctx context.Context, in *TaxonsRequest, opts ...client.CallOption) (*TasonsCodeResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Taxons.CreateChildren", in)
	out := new(TasonsCodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxonsClient) Update(ctx context.Context, in *TaxonsRequest, opts ...client.CallOption) (*TasonsCodeResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Taxons.Update", in)
	out := new(TasonsCodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxonsClient) Delete(ctx context.Context, in *TasonsDeleteRequest, opts ...client.CallOption) (*TasonsCodeResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Taxons.Delete", in)
	out := new(TasonsCodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxonsClient) Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (Taxons_StreamClient, error) {
	req := c.c.NewRequest(c.serviceName, "Taxons.Stream", &StreamingRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &taxonsStreamClient{stream}, nil
}

type Taxons_StreamClient interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*StreamingResponse, error)
}

type taxonsStreamClient struct {
	stream client.Streamer
}

func (x *taxonsStreamClient) Close() error {
	return x.stream.Close()
}

func (x *taxonsStreamClient) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *taxonsStreamClient) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *taxonsStreamClient) Recv() (*StreamingResponse, error) {
	m := new(StreamingResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *taxonsClient) PingPong(ctx context.Context, opts ...client.CallOption) (Taxons_PingPongClient, error) {
	req := c.c.NewRequest(c.serviceName, "Taxons.PingPong", &Ping{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &taxonsPingPongClient{stream}, nil
}

type Taxons_PingPongClient interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Ping) error
	Recv() (*Pong, error)
}

type taxonsPingPongClient struct {
	stream client.Streamer
}

func (x *taxonsPingPongClient) Close() error {
	return x.stream.Close()
}

func (x *taxonsPingPongClient) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *taxonsPingPongClient) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *taxonsPingPongClient) Send(m *Ping) error {
	return x.stream.Send(m)
}

func (x *taxonsPingPongClient) Recv() (*Pong, error) {
	m := new(Pong)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Taxons service

type TaxonsHandler interface {
	Root(context.Context, *TaxonsShopIDRequest, *TaxonsMessage) error
	Create(context.Context, *TasonsCreateRequest, *TasonsCodeResponse) error
	CreateChildren(context.Context, *TaxonsRequest, *TasonsCodeResponse) error
	Update(context.Context, *TaxonsRequest, *TasonsCodeResponse) error
	Delete(context.Context, *TasonsDeleteRequest, *TasonsCodeResponse) error
	Stream(context.Context, *StreamingRequest, Taxons_StreamStream) error
	PingPong(context.Context, Taxons_PingPongStream) error
}

func RegisterTaxonsHandler(s server.Server, hdlr TaxonsHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Taxons{hdlr}, opts...))
}

type Taxons struct {
	TaxonsHandler
}

func (h *Taxons) Root(ctx context.Context, in *TaxonsShopIDRequest, out *TaxonsMessage) error {
	return h.TaxonsHandler.Root(ctx, in, out)
}

func (h *Taxons) Create(ctx context.Context, in *TasonsCreateRequest, out *TasonsCodeResponse) error {
	return h.TaxonsHandler.Create(ctx, in, out)
}

func (h *Taxons) CreateChildren(ctx context.Context, in *TaxonsRequest, out *TasonsCodeResponse) error {
	return h.TaxonsHandler.CreateChildren(ctx, in, out)
}

func (h *Taxons) Update(ctx context.Context, in *TaxonsRequest, out *TasonsCodeResponse) error {
	return h.TaxonsHandler.Update(ctx, in, out)
}

func (h *Taxons) Delete(ctx context.Context, in *TasonsDeleteRequest, out *TasonsCodeResponse) error {
	return h.TaxonsHandler.Delete(ctx, in, out)
}

func (h *Taxons) Stream(ctx context.Context, stream server.Streamer) error {
	m := new(StreamingRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.TaxonsHandler.Stream(ctx, m, &taxonsStreamStream{stream})
}

type Taxons_StreamStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*StreamingResponse) error
}

type taxonsStreamStream struct {
	stream server.Streamer
}

func (x *taxonsStreamStream) Close() error {
	return x.stream.Close()
}

func (x *taxonsStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *taxonsStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *taxonsStreamStream) Send(m *StreamingResponse) error {
	return x.stream.Send(m)
}

func (h *Taxons) PingPong(ctx context.Context, stream server.Streamer) error {
	return h.TaxonsHandler.PingPong(ctx, &taxonsPingPongStream{stream})
}

type Taxons_PingPongStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Pong) error
	Recv() (*Ping, error)
}

type taxonsPingPongStream struct {
	stream server.Streamer
}

func (x *taxonsPingPongStream) Close() error {
	return x.stream.Close()
}

func (x *taxonsPingPongStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *taxonsPingPongStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *taxonsPingPongStream) Send(m *Pong) error {
	return x.stream.Send(m)
}

func (x *taxonsPingPongStream) Recv() (*Ping, error) {
	m := new(Ping)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func init() { proto.RegisterFile("btdxcx.com/micro/taxons-srv/proto/imp/imp.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 538 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x55, 0xdd, 0x6e, 0xd3, 0x30,
	0x14, 0x6e, 0xfa, 0x93, 0x8d, 0x53, 0x51, 0x0d, 0x83, 0x50, 0x15, 0x24, 0x54, 0x7c, 0x95, 0x49,
	0x34, 0x99, 0xca, 0x15, 0x57, 0x08, 0x75, 0x5c, 0xec, 0x02, 0x09, 0x65, 0xdb, 0x03, 0x64, 0x89,
	0x95, 0x5a, 0x5b, 0x7c, 0x42, 0xec, 0x4d, 0xe5, 0x65, 0x78, 0x02, 0xde, 0x87, 0x07, 0xe1, 0x05,
	0x50, 0x6c, 0x27, 0xea, 0x80, 0xa6, 0x59, 0x25, 0xa4, 0x5d, 0x54, 0xb2, 0x7d, 0xbe, 0xcf, 0xdf,
	0x39, 0x9f, 0x4f, 0x4f, 0x20, 0xbc, 0x52, 0xe9, 0x3a, 0x59, 0x07, 0x09, 0xe6, 0x61, 0xce, 0x93,
	0x12, 0x43, 0x15, 0xaf, 0x51, 0xc8, 0xb9, 0x2c, 0xef, 0xc2, 0xa2, 0x44, 0x85, 0x21, 0xcf, 0x8b,
	0xea, 0x17, 0xe8, 0x1d, 0xf1, 0x12, 0xcc, 0x03, 0x4b, 0x92, 0x2b, 0x2c, 0x02, 0x59, 0xde, 0x05,
	0x86, 0x43, 0x5f, 0xc1, 0xc1, 0x67, 0x26, 0x65, 0x9c, 0x31, 0x72, 0x04, 0x03, 0x19, 0x7f, 0x9b,
	0x3a, 0x33, 0xc7, 0x7f, 0x12, 0x55, 0x4b, 0x3a, 0x87, 0xe7, 0x17, 0x1a, 0x76, 0xbe, 0xc2, 0xe2,
	0xec, 0x34, 0x62, 0x5f, 0x6f, 0x99, 0x54, 0xe4, 0x25, 0xb8, 0x52, 0x1f, 0x58, 0xac, 0xdd, 0xd1,
	0x8f, 0x15, 0x5c, 0xa2, 0x90, 0xa7, 0xec, 0x86, 0x29, 0xb6, 0x03, 0x4e, 0x08, 0x0c, 0x13, 0x4c,
	0xd9, 0xb4, 0xaf, 0x4f, 0xf5, 0x9a, 0xfa, 0x40, 0xcc, 0x15, 0x4b, 0x4c, 0x59, 0xc4, 0x64, 0x81,
	0x42, 0xb2, 0x06, 0xe9, 0x6c, 0x20, 0xbf, 0x3b, 0xb5, 0xda, 0xb2, 0x64, 0x71, 0x27, 0x35, 0x11,
	0xe7, 0x8d, 0x5a, 0xb5, 0x26, 0x33, 0x18, 0xa7, 0x4c, 0x26, 0x25, 0x2f, 0x14, 0x47, 0x31, 0x1d,
	0xe8, 0xd0, 0xe6, 0x11, 0x79, 0x0f, 0x2e, 0xcf, 0xe3, 0x8c, 0xc9, 0xe9, 0x70, 0x36, 0xf0, 0xc7,
	0x8b, 0x37, 0xc1, 0x76, 0x2f, 0x83, 0xb3, 0x0a, 0x19, 0x59, 0x02, 0xfd, 0xe1, 0xc0, 0x53, 0xe3,
	0xde, 0x1e, 0x46, 0x34, 0xe9, 0x0e, 0xb6, 0xa7, 0x3b, 0x6c, 0x4b, 0x77, 0xf4, 0xd0, 0x74, 0x2f,
	0x61, 0x52, 0x67, 0x6b, 0x5d, 0x5f, 0xc2, 0x41, 0x6e, 0x5a, 0x43, 0xe7, 0x3b, 0x5e, 0x1c, 0xb7,
	0xdd, 0x66, 0xc8, 0xb6, 0x97, 0xa2, 0x9a, 0x49, 0x3f, 0xc0, 0x48, 0xeb, 0x90, 0x09, 0xf4, 0x79,
	0x6a, 0x0b, 0xef, 0xf3, 0x74, 0x5b, 0xd1, 0x45, 0xac, 0x56, 0x75, 0xd1, 0xd5, 0x9a, 0xfe, 0x6a,
	0x6c, 0xac, 0xfb, 0xf4, 0x31, 0xdb, 0x48, 0x3e, 0xc1, 0x61, 0xb2, 0xe2, 0x37, 0x69, 0xc9, 0xc4,
	0xd4, 0xd5, 0xe4, 0x07, 0xb8, 0xd6, 0x50, 0xa9, 0x0f, 0x47, 0xe7, 0xaa, 0x64, 0x71, 0xce, 0x45,
	0x56, 0xb7, 0xcf, 0x0b, 0x18, 0x25, 0x78, 0x2b, 0x94, 0x2e, 0x7b, 0x10, 0x99, 0x0d, 0x3d, 0x86,
	0x67, 0x1b, 0x48, 0xfb, 0x74, 0xff, 0x86, 0xbe, 0x86, 0xe1, 0x17, 0x2e, 0x32, 0x6d, 0xa0, 0x2a,
	0xf1, 0x9a, 0xd9, 0xb0, 0xdd, 0xe9, 0x38, 0x6e, 0x8f, 0x2f, 0x7e, 0x8e, 0xc0, 0x35, 0x09, 0x93,
	0x14, 0x86, 0x11, 0xa2, 0x22, 0xe1, 0xee, 0xe2, 0xee, 0xcd, 0x0e, 0xaf, 0xbb, 0x1b, 0xb4, 0x47,
	0x38, 0xb8, 0xe6, 0xcf, 0xbd, 0x4b, 0xe7, 0xaf, 0x31, 0xe0, 0x05, 0x1d, 0x08, 0x9b, 0x23, 0xe6,
	0x1a, 0x26, 0xe6, 0x82, 0xa5, 0x7d, 0x02, 0xd2, 0x21, 0xd3, 0x7d, 0xc5, 0x12, 0x70, 0x2f, 0x8b,
	0xb4, 0xaa, 0xeb, 0x3f, 0x8a, 0x70, 0x70, 0xcd, 0x1c, 0xee, 0x62, 0xde, 0xbd, 0x89, 0xbd, 0x8f,
	0x94, 0xe9, 0x41, 0xf2, 0xb6, 0x8d, 0xf9, 0x67, 0x47, 0x7b, 0xf3, 0x8e, 0x68, 0x23, 0x43, 0x7b,
	0x27, 0x0e, 0xb9, 0x80, 0xc3, 0xaa, 0x87, 0x75, 0x9f, 0xce, 0xda, 0xe8, 0x15, 0xca, 0x6b, 0x47,
	0xa0, 0xc8, 0x68, 0xcf, 0x77, 0x4e, 0x9c, 0x2b, 0x57, 0x7f, 0x28, 0xdf, 0xfd, 0x0e, 0x00, 0x00,
	0xff, 0xff, 0x06, 0xa1, 0xbb, 0x25, 0x5b, 0x07, 0x00, 0x00,
}
