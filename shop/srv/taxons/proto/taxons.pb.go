// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/taxons.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	proto/taxons.proto

It has these top-level messages:
	TaxonsRequest
	TaxonsResponse
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type TaxonsRequest struct {
	ShopID string `protobuf:"bytes,1,opt,name=shopID" json:"shopID,omitempty"`
}

func (m *TaxonsRequest) Reset()                    { *m = TaxonsRequest{} }
func (m *TaxonsRequest) String() string            { return proto1.CompactTextString(m) }
func (*TaxonsRequest) ProtoMessage()               {}
func (*TaxonsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TaxonsRequest) GetShopID() string {
	if m != nil {
		return m.ShopID
	}
	return ""
}

type TaxonsResponse struct {
	Code        string                  `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
	Name        string                  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Description string                  `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	Images      []*TaxonsResponse_Image `protobuf:"bytes,4,rep,name=images" json:"images,omitempty"`
	Children    []*TaxonsResponse       `protobuf:"bytes,5,rep,name=children" json:"children,omitempty"`
}

func (m *TaxonsResponse) Reset()                    { *m = TaxonsResponse{} }
func (m *TaxonsResponse) String() string            { return proto1.CompactTextString(m) }
func (*TaxonsResponse) ProtoMessage()               {}
func (*TaxonsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TaxonsResponse) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *TaxonsResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TaxonsResponse) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TaxonsResponse) GetImages() []*TaxonsResponse_Image {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *TaxonsResponse) GetChildren() []*TaxonsResponse {
	if m != nil {
		return m.Children
	}
	return nil
}

type TaxonsResponse_Image struct {
	Code string `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
	Path string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
}

func (m *TaxonsResponse_Image) Reset()                    { *m = TaxonsResponse_Image{} }
func (m *TaxonsResponse_Image) String() string            { return proto1.CompactTextString(m) }
func (*TaxonsResponse_Image) ProtoMessage()               {}
func (*TaxonsResponse_Image) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *TaxonsResponse_Image) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *TaxonsResponse_Image) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func init() {
	proto1.RegisterType((*TaxonsRequest)(nil), "TaxonsRequest")
	proto1.RegisterType((*TaxonsResponse)(nil), "TaxonsResponse")
	proto1.RegisterType((*TaxonsResponse_Image)(nil), "TaxonsResponse.Image")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Taxons service

type TaxonsClient interface {
	Root(ctx context.Context, in *TaxonsRequest, opts ...client.CallOption) (*TaxonsResponse, error)
}

type taxonsClient struct {
	c           client.Client
	serviceName string
}

func NewTaxonsClient(serviceName string, c client.Client) TaxonsClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "taxons"
	}
	return &taxonsClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *taxonsClient) Root(ctx context.Context, in *TaxonsRequest, opts ...client.CallOption) (*TaxonsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Taxons.Root", in)
	out := new(TaxonsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Taxons service

type TaxonsHandler interface {
	Root(context.Context, *TaxonsRequest, *TaxonsResponse) error
}

func RegisterTaxonsHandler(s server.Server, hdlr TaxonsHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Taxons{hdlr}, opts...))
}

type Taxons struct {
	TaxonsHandler
}

func (h *Taxons) Root(ctx context.Context, in *TaxonsRequest, out *TaxonsResponse) error {
	return h.TaxonsHandler.Root(ctx, in, out)
}

func init() { proto1.RegisterFile("proto/taxons.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 224 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x50, 0xd1, 0x4a, 0xc3, 0x40,
	0x10, 0x24, 0x36, 0x3d, 0x74, 0x8b, 0x15, 0x16, 0x94, 0xa3, 0x4f, 0xa1, 0x2f, 0x2d, 0x88, 0x57,
	0xac, 0xbf, 0xe0, 0x4b, 0x5f, 0x0f, 0x7f, 0xe0, 0x4c, 0x16, 0x73, 0x60, 0x6f, 0xcf, 0xdc, 0x09,
	0xfe, 0xb1, 0xbf, 0x21, 0x77, 0x49, 0xc4, 0x04, 0x7c, 0x9b, 0x99, 0x9d, 0xd9, 0x5d, 0x06, 0xd0,
	0x77, 0x1c, 0xf9, 0x10, 0xcd, 0x17, 0xbb, 0xa0, 0x32, 0xd9, 0xee, 0xe0, 0xfa, 0x25, 0x73, 0x4d,
	0x1f, 0x9f, 0x14, 0x22, 0xde, 0x81, 0x08, 0x2d, 0xfb, 0xd3, 0xb3, 0x2c, 0xaa, 0x62, 0x7f, 0xa5,
	0x07, 0xb6, 0xfd, 0x2e, 0x60, 0x3d, 0x3a, 0x83, 0x67, 0x17, 0x08, 0x11, 0xca, 0x9a, 0x1b, 0x1a,
	0x8c, 0x19, 0x27, 0xcd, 0x99, 0x33, 0xc9, 0x8b, 0x5e, 0x4b, 0x18, 0x2b, 0x58, 0x35, 0x14, 0xea,
	0xce, 0xfa, 0x68, 0xd9, 0xc9, 0x45, 0x1e, 0xfd, 0x95, 0xf0, 0x01, 0x84, 0x3d, 0x9b, 0x37, 0x0a,
	0xb2, 0xac, 0x16, 0xfb, 0xd5, 0xf1, 0x56, 0x4d, 0x4f, 0xa9, 0x53, 0x9a, 0xea, 0xc1, 0x84, 0xf7,
	0x70, 0x59, 0xb7, 0xf6, 0xbd, 0xe9, 0xc8, 0xc9, 0x65, 0x0e, 0xdc, 0xcc, 0x02, 0xfa, 0xd7, 0xb0,
	0x39, 0xc0, 0x32, 0xa7, 0xff, 0x7b, 0xd7, 0x9b, 0xd8, 0x8e, 0xef, 0x26, 0x7c, 0x7c, 0x04, 0xd1,
	0x2f, 0xc3, 0x1d, 0x94, 0x9a, 0x39, 0xe2, 0x5a, 0x4d, 0x3a, 0xda, 0xcc, 0xaf, 0xbd, 0x8a, 0x5c,
	0xe6, 0xd3, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xda, 0x13, 0xac, 0x83, 0x62, 0x01, 0x00, 0x00,
}
